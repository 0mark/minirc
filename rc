#!/bin/sh
# This file is executed on boot to initialize the system and can also be run by
# the user to start/stop daemons.

# Fallback Configuration Values, to be able to run even with a broken, deleted
# or outdated minirc.conf:
CORE="apifs swap localtime network udev mount"
EXTRA="acpid alsa avahi conman consolefont cups dbus dhcpcd dkms iptables keymap ldm local nfsmount ntpd sshd syslog-ng wpa_supplicant"
LOCAL=""
DISABLE=""
ENABLED="${CORE} syslog-ng @crond @dhcpcd @sshd"
[ -f /usr/lib/systemd/systemd ] && UDEV="systemd" || UDEV="busybox"
NETWORK_INTERFACE="eth0"
WIFI_INTERFACE="wlan0"

# User-definable start/stop/restart/poll functions
custom_restart() { default_stop "$1"; default_start "$1"; }
custom_start()   { "$1"; }
custom_stop()    { killall "$1"; }
custom_poll()    { pgrep "^$1\$" >& /dev/null; }

source /etc/minirc.conf

on_boot() {
    #===================
    # start the default daemons
    echo_color 2 " # " "starting daemons:\n"
    for dmn in $ENABLED; do
        if [[ "${dmn:0:1}" == '@' ]]; then
            bg_run start "${dmn:1}"
        else
            run start "$dmn"
        fi
        echo
    done
    echo
}

on_shutdown() {
    #===================
    # stop the default daemons
    echo_color 4 " â€  " "stopping daemons:\n"
    eroc=""
    for dmn in $CORE; do
        eroc="$dmn $eroc"
    done
    for grp in LOCAL EXTRA eroc; do
        echo_color 4 " * " "$grp\n"
        for dmn in ${!grp}; do
            if [[ " $DISABLE " != *" $dmn "* ]]; then
                default_poll "$dmn" >& /dev/null
                ret=$?
                if [ $ret -eq 0 ]; then
                    bg_run stop "$dmn"
                    echo
                elif [ $ret -eq 255 ]; then
                    bg_run stop "$dmn"
                    echo
                fi
            fi
        done
    done
    echo

    #===================
    # load minirc.local.shutdown
    if [ -x /etc/minirc.local.shutdown ]; then
        echo_color 4 "loading /etc/minirc.local.shutdown...\n"
        /etc/minirc.local.shutdown
    fi
}

default_start() {
    case "$1" in
    acpid)
        acpid 
        ;;
    alsa)
        alsactl restore
        ;;
    apifs)
        mountpoint -q /proc    || mount -t proc proc /proc -o nosuid,noexec,nodev
        mountpoint -q /sys     || mount -t sysfs sys /sys -o nosuid,noexec,nodev
        mountpoint -q /run     || mount -t tmpfs run /run -o mode=0755,nosuid,nodev
        mountpoint -q /dev     || mount -t devtmpfs dev /dev -o mode=0755,nosuid
        mkdir -p /dev/{pts,shm}
        mountpoint -q /dev/pts || mount -t devpts devpts /dev/pts -o mode=0620,gid=5,nosuid,noexec
        mountpoint -q /dev/shm || mount -t tmpfs shm /dev/shm -o mode=1777,nosuid,nodev
        mkdir /run/lock
        ;;
    avahi)
        /usr/bin/avahi-daemon -s -D
        /usr/bin/avahi-dnsconfd -s -D
        ;;
    conman)
        /usr/bin/connmand --nodnsproxy
        ;;
    consolefont)
        if [ ! -z "$FONT" ]; then
            setfont $FONT
        else
            echo "FONT not set"
            exit 255
        fi
        ;;
    cups)
        cupsd
        ;;
    dbus)
        mkdir -p /run/dbus &&
        dbus-uuidgen --ensure &&
        /usr/bin/dbus-daemon --system
        ;;
    dhcpcd)
        if ip link | grep -Fq $NETWORK_INTERFACE; then :; else
            echo_color 3 "waiting for $NETWORK_INTERFACE to settle..."
            for i in $(seq 100); do
                ip link | grep -Fq $NETWORK_INTERFACE && break
                sleep 0.1
            done
        fi
        dhcpcd -nqb
        ;;
    dkms)
        /usr/lib/systemd/scripts/dkms start
        ;;
    iptables)
        iptables-restore < /etc/iptables/iptables.rules
        ;;
    keymap)
        if [ ! -z "$KEYMAP" ]; then
            loadkeys $KEYMAP > /dev/null
        else
            echo "KEYMAP not set"
            exit 255
        fi
        ;;
    ldm)
        if [ ! -z $LDM_USER -a ! -z $LDM_GROUP ]; then
            /opt/bin/ldm -p /media -d -u $LDM_USER -g $LDM_GROUP -c /opt/bin/ldm_callback &> /dev/null
        else
            echo "LDM_USER or LDM_GROUP not set!"
            return 1
        fi
        ;;
    local)
        if [ -x /etc/minirc.local ]; then
            /etc/minirc.local
        else
            echo "/etc/minirc.local not found!"
            return 1
        fi
        ;;
    localtime)
        hwclock  --localtime -s
        ;;
    mount)
        mount -a -F
        mount -o remount,rw /
        ;;
    network)
        /usr/sbin/ip link set up dev lo
        cat /etc/hostname >| /proc/sys/kernel/hostname
        ;;
    nfsmount)
        /usr/bin/rpcbind
        /usr/bin/rpc.statd
        ;;
    ntpd)
        ntpd -g -u ntp
        ;;
    sshd)
        if [ ! -f /etc/ssh/ssh_host_rsa_key -o ! -f /etc/ssh/ssh_host_dsa_key -o ! -f /etc/ssh/ssh_host_ecdsa_key ]; then
                /usr/bin/ssh-keygen -A
        fi
        /usr/bin/sshd  # requires an absolute path
        ;;
    swap)
        swapon -a
        ;;
    syslog-ng)
        syslog-ng
        ;;
    udev)
        if [ "$UDEV" == systemd ]; then
            /usr/lib/systemd/systemd-udevd --daemon
            /usr/bin/udevadm trigger --action=add --type=subsystems
            /usr/bin/udevadm trigger --action=add --type=devices
            /usr/lib/systemd/systemd-modules-load
        elif [ "$UDEV" = eudev ]; then
            /usr/bin/udevd --daemon
            /usr/bin/udevadm trigger --action=add --type=subsystems
            /usr/bin/udevadm trigger --action=add --type=devices
        else # use busybox mdev as fallback:
            busybox mdev -s
            echo /sbin/mdev > /proc/sys/kernel/hotplug
        fi
        ;;
    wpa_supplicant)
        wpa_supplicant -Dwext -B -i"$WIFI_INTERFACE" -c/etc/wpa_supplicant.conf
        ;;
    *)
        custom_start "$@"
        ;;
    esac
}

default_stop() {
    case "$1" in
    alsa)
        alsactl store
        ;;
    apifs)
        umount -r /run
        ;;
    avahi)
        killall avahi-dnsconfd
        killall avahi-daemon
        ;;
    conman)
        killall connmand
        ;;
    cups)
        killall cupsd
        ;;
    dbus)
        kill $(cat /run/dbus/pid)
        rm /run/dbus/pid
        ;;
    dkms)
        /usr/lib/systemd/scripts/dkms stop
        ;;
    iptables)
        for table in $(cat /proc/net/ip_tables_names); do
            iptables-restore < /var/lib/iptables/empty-$table.rules
        done
        ;;
    nfsmount)
        killall rpc.statd
        killall rpcbind
        ;;
    swap)
        swapoff -a
        ;;
    udev)
        if [ "$UDEV" == systemd ]; then
            killall systemd-udevd
        fi
        ;;
    *)
        custom_stop "$@"
        ;;
    esac
}

default_restart() { custom_restart "$@"; }

default_poll() {
    case "$1" in
    alsa)
        return 255  # doesn't make much sense for this service
        ;;
    apifs)
        #[ $(df -a -l | egrep "/proc\$|/sys\$|/run\$|/dev\$|/dev/pts\$|/dev/shm\$" | wc -l) -eq 6 ]
        [ $(cat /etc/mtab | egrep " /proc | /sys | /run | /dev | /dev/pts | /dev/shm " | wc -l) -eq 6 ]
        ;;
    avahi)
        pgrep avahi-daemon && pgrep avahi-dnsconfd > /dev/null
        ;;
    cups)
        pgrep cupsd > /dev/null
        ;;
    dbus)
        pid=$(cat /run/dbus/pid);
        [ "$(ps $pid | wc -l)" -eq 2 ]
        ;;
    dkms)
        return 255
        ;;
    conman)
        pgrep connmand > /dev/null
        ;;
    consolefont)
        return 255  # doesn't make much sense for this service
        ;;
    iptables)
        iptables -L | grep -m 1 -q '^ACCEPT\|^REJECT'
        ;;
    keymap)
        return 255  # doesn't make much sense for this service
        ;;
    local)
        return 255  # doesn't make much sense for this service
        ;;
    localtime)
        if [ -f /etc/localtime ]; then
            #if [ "$(hwclock | sed 's/.* \([0-9]\+\):.*/\1/g')" != "$(date | sed 's/.* \([0-9]\+\):.*/\1/g')" ]; then
            #    return 0;
            #else
                return 255;
            #fi
        else
            return 1;
        fi
        ;;
    network)
        ip link | grep ": lo:" &> /dev/null
        ;;
    mount)
        return 255  # doesn't make much sense for this service
        ;;
    nfsmount)
        pgrep rpcbind && pgrep rpc.statd > /dev/null
        ;;
    swap)
        [ "$(swapon | wc -l)" -gt 1 ] && return 255
        return 1
        ;;
    udev)
        if [ "$UDEV" == systemd ]; then
            ps -A | grep systemd-udevd &> /dev/null
        else # use busybox mdev as fallback:
            ps -A | grep mdev &> /dev/null
        fi
        ;;
    *)
        custom_poll "$@"
        ;;
    esac
}

daemonize() {
    setsid $1 >/dev/null 2>&1 < /dev/null &
}

run() {
    cmd=$1; dmn=$2
    echo_color 4 " * " "${cmd}ing $dmn"
    msgf=$(mktemp rc_msg_XXXX)
    default_${cmd} "$dmn" &> $msgf
    if [ "$?" -gt 0 ]; then
        echo_color 1 " [FAIL]"
        logger -t rc $@ [ FAILED ]
        errors[$dmn]=$(cat $msgf)
    else
        echo_color 2 " [OK]"
    fi
    rm $msgf
}

bg_run() {
    cmd=$1; dmn=$2
    echo_color 4 " o " "${cmd}ing $dmn"
    _bg_run "$1" "$2" &
}

_bg_run() {
    cmd=$1; dmn=$2
    msg=$(default_${cmd} "$dmn" 2>&1)
    if [ "$?" -gt 0 ]; then
        logger -t rc $@ [ FAILED ]
        echo -e "**** ${@} ****\n$msg" >> /var/log/minirc_failed.log
    fi
}

echo_color() {
  color="$1"
  shift
  text="$1"
  shift
  echo -n -e "\033[1;3${color}m$text\033[00m$@"
}

list_errors() {
    if [ ${#errors[@]} -gt 0 ]; then
        echo_color 1 " * " "Some errors occured:\n"
        for i in "${!errors[@]}"; do
            echo_color 1 " ! " "$i\n"
            echo ${errors[$i]}
        done
    fi
}

#===================
# handle arguments
declare -A errors
case "$1" in
init)
    on_boot
    ;;
shutdown)
    on_shutdown
    ;;
start|stop|restart)
    cmd="$1"
    shift
    for dmn in ${@}; do
        if [[ " $CORE $EXTRA $LOCAL " == *" $dmn "* ]]; then
            if [[ " $DISABLE " != *" $dmn "* ]]; then
                run $cmd $dmn
                echo
                list_errors
            else
                echo_color 1 "!" " $dmn is disabled\n"
            fi
        else
            echo_color 1 "!" " $dmn unknown\n"
        fi
    done
    ;;
''|list)
    # list all daemons and their status
    for grp in CORE EXTRA LOCAL; do
        echo_color 4 " * " "$grp\n"
        for dmn in ${!grp}; do
            if [[ " $DISABLE " != *" $dmn "* ]]; then
                default_poll "$dmn" >& /dev/null
                ret=$?
                if [ $ret -eq 0 ]; then
                    echo_color 2 "[X] ${dmn}\n"
                elif [ $ret -eq 255 ]; then
                    echo_color 3 "[?] ${dmn}\n"
                else
                    echo_color 0 "[ ] ${dmn}\n"
                fi
            fi
        done
    done
    ;;
--version)
    echo minirc 0.2
    ;;
*)
    self=$(basename "$0")
    echo "Usage: $self [--help] [--version] <action> [list of daemons]"
    echo
    echo "Actions:"
    echo "   $self list     shows status of all daemons (default action)"
    echo "   $self init     initialize the system (use in /etc/inittab only!)"
    echo "   $self start    starts daemons"
    echo "   $self stop     stops daemons"
    echo "   $self restart  restarts daemons"
    ;;
esac
