#!/bin/sh
# This file is executed on boot to initialize the system and can also be run by
# the user to start/stop daemons.

# Fallback Configuration Values, to be able to run even with a broken, deleted
# or outdated minirc.conf:
DAEMONS="apifs network udev mount syslog-ng iptables alsa crond dbus wpa_supplicant dhcpcd sshd acpid ntpd"
CORE="apifs network udev mount"
ENABLED="${CORE} @syslog-ng @crond @dhcpcd @sshd"
UDEV="busybox"
NETWORK_INTERFACE="eth0"
WIFI_INTERFACE="wlan0"

# User-definable start/stop/restart/poll functions
custom_restart() { "$1"; }
custom_start()   { default_stop "$1"; default_start "$1"; }
custom_stop()    { killall "$1"; }
custom_poll()    { pgrep "^$1\$" >& /dev/null; }

source /etc/minirc.conf

on_boot() {
    #===================
    # load /etc/minirc.local
    if [ -x /etc/minirc.local ]; then
        echo_color 2 " * " "loading /etc/minirc.local...\n"
        /etc/minirc.local
    fi

    #===================
    # start the default daemons
    echo_color 2 " * " "starting daemons:"
    for dmn in $ENABLED; do
        if [[ "${dmn:0:1}" == '@' ]]; then
            custom_start "${dmn:1}" &
        else
            custom_start "$dmn"
        fi
    done
    echo
}

on_shutdown() {
    #===================
    # stop the default daemons
    echo_color 4 " â€  " "stopping daemons: "
    custom_stop all
    echo

    #===================
    # load minirc.local.shutdown
    if [ -x /etc/minirc.local.shutdown ]; then
        echo_color 4 "loading /etc/minirc.local.shutdown...\n"
        /etc/minirc.local.shutdown
    fi
}

default_start() {
    echo -n " $1"
    case "$1" in
    all)
        for dmn in $DAEMONS $ENABLED; do
            custom_poll "${dmn##@}" || custom_start "${dmn##@}"
        done
        ;;
    apifs)
        mountpoint -q /proc    || mount -t proc proc /proc -o nosuid,noexec,nodev
        mountpoint -q /sys     || mount -t sysfs sys /sys -o nosuid,noexec,nodev
        mountpoint -q /run     || mount -t tmpfs run /run -o mode=0755,nosuid,nodev
        mountpoint -q /dev     || mount -t devtmpfs dev /dev -o mode=0755,nosuid
        mkdir -p /dev/{pts,shm}
        mountpoint -q /dev/pts || mount -t devpts devpts /dev/pts -o mode=0620,gid=5,nosuid,noexec
        mountpoint -q /dev/shm || mount -t tmpfs shm /dev/shm -o mode=1777,nosuid,nodev
        ;;
    network)
        /usr/sbin/ip link set up dev lo

        cat /etc/hostname >| /proc/sys/kernel/hostname
        ;;
    udev)
        if [ "$UDEV" == systemd ]; then
            /usr/lib/systemd/systemd-udevd --daemon
            /usr/bin/udevadm trigger --action=add --type=subsystems
            /usr/bin/udevadm trigger --action=add --type=devices
        else # use busybox mdev as fallback:
            busybox mdev -s
            echo /sbin/mdev > /proc/sys/kernel/hotplug
        fi
        ;;
    mount)
        mount -a
        mount -o remount,rw /
        ;;

    acpid)
        acpid &> /dev/null
        ;;
    alsa)
        alsactl restore
        ;;
    dbus)
        mkdir -p /run/dbus
        /usr/bin/dbus-daemon --system
        ;;
    iptables)
        iptables-restore < /etc/iptables/iptables.rules
        ;;
    sshd)
        /usr/bin/sshd  # requires an absolute path
        ;;
    dhcpcd)
        if ip link | grep -Fq $NETWORK_INTERFACE; then :; else
            echo_color 3 "waiting for $NETWORK_INTERFACE to settle..."
            for i in $(seq 100); do
                ip link | grep -Fq $NETWORK_INTERFACE && break
                sleep 0.1
            done
        fi
        dhcpcd -nqb;;
    ntpd)
        ntpd -g -u ntp
        ;;
    wpa_supplicant)
        wpa_supplicant -Dwext -B -i"$WIFI_INTERFACE" -c/etc/wpa_supplicant.conf
        ;;
    *)
        custom_start "$@"
        ;;
    esac
}

default_stop() {
    echo -n " $1"
    case "$1" in
    all)
        for dmn in $DAEMONS $ENABLED; do
            custom_poll "${dmn##@}" && custom_stop "${dmn##@}"
        done;;
    apifs)
        umount -r /run
        ;;
    udev)
        if [ "$UDEV" == systemd ]; then
            killall systemd-udevd
        fi
        ;;
    alsa)
        alsactl store;;
    dbus)
        killall dbus-launch
        killall dbus-daemon;;
    iptables)
        for table in $(cat /proc/net/ip_tables_names); do
            iptables-restore < /var/lib/iptables/empty-$table.rules
        done;;
    *)
        custom_stop "$@"
        ;;
    esac
}

default_restart() { custom_restart "$@"; }

default_poll() {
    case "$1" in
    alsa)
        return 0  # doesn't make much sense for this service
        ;;
    iptables)
        iptables -L | grep -m 1 -q '^ACCEPT\|^REJECT'
        ;;
    dbus)
        pgrep "dbus-daemon"
        ;;
    *)
        custom_poll "$@"
        ;;
    esac
}

echo_color() {
  color="$1"
  shift
  text="$@"
  echo -n -e "\033[1;3${color}m$text\033[00m"
}


#===================
# handle arguments
case "$1" in
init)
    on_boot
    ;;
shutdown)
    on_shutdown
    ;;
start|stop|restart)
    cmd="$1"
    shift
    for dmn in ${@:-$DAEMONS}; do
        echo -n "${cmd}ing "
        custom_${cmd} "$dmn"
    done
    ;;
''|list)
    # list all daemons and their status
    for dmn in $DAEMONS; do
        if custom_poll "$dmn" >& /dev/null; then
            echo_color 2 "[X] ${dmn}\n"
        else
            echo_color 0 "[ ] ${dmn}\n"
        fi
    done
    ;;
--version)
    echo minirc 0.2
    ;;
*)
    self=$(basename "$0")
    echo "Usage: $self [--help] [--version] <action> [list of daemons]"
    echo
    echo "Actions:"
    echo "   $self list     shows status of all daemons (default action)"
    echo "   $self init     initialize the system (use in /etc/inittab only!)"
    echo "   $self start    starts daemons"
    echo "   $self stop     stops daemons"
    echo "   $self restart  restarts daemons"
    ;;
esac
